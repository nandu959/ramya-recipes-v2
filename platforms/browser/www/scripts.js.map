{"version":3,"sources":["src/assets/js/xml2json.js"],"names":[],"mappings":"AAAA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;;;AAIA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA,iCAAiC;AACjC;AACA,yCAAyC,GAAG;AAC5C;AACA,6FAA6F;AAC7F,uDAAuD;AACvD;AACA;AACA,wDAAwD;AACxD;AACA,+CAA+C,GAAG;AAClD;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,+CAA+C,GAAG;AAClD;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,oCAAoC,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,IAAI,6FAA6F;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA,6CAA6C,GAAG;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,GAAG;AAC1C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,mCAAmC,GAAG;AACtC,kCAAkC;AAClC,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gFAAgF;AAC5F,C","file":"scripts.js","sourcesContent":["/*\tThis work is licensed under Creative Commons GNU LGPL License.\n\n\n\n\tLicense: http://creativecommons.org/licenses/LGPL/2.1/\n   Version: 0.9\n\tAuthor:  Stefan Goessner/2006\n\tWeb:     http://goessner.net/ \n*/\nvar parseXml;\n\nif (typeof window.DOMParser != \"undefined\") {\n    parseXml = function(xmlStr) {\n        return ( new window.DOMParser() ).parseFromString(xmlStr, \"text/xml\");\n    };\n} else if (typeof window.ActiveXObject != \"undefined\" &&\n       new window.ActiveXObject(\"Microsoft.XMLDOM\")) {\n    parseXml = function(xmlStr) {\n        var xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n        xmlDoc.async = \"false\";\n        xmlDoc.loadXML(xmlStr);\n        return xmlDoc;\n    };\n} else {\n    throw new Error(\"No XML parser found\");\n}\n\n\n\nfunction xml2json(xml, tab) {\n   var X = {\n      toObj: function(xml) {\n         var o = {};\n         if (xml.nodeType==1) {   // element node ..\n            if (xml.attributes.length)   // element with attributes  ..\n               for (var i=0; i<xml.attributes.length; i++)\n                  //o[\"@\"+xml.attributes[i].nodeName] = (xml.attributes[i].nodeValue||\"\").toString();\n                  o[xml.attributes[i].nodeName] = (xml.attributes[i].nodeValue||\"\").toString();\n            if (xml.firstChild) { // element has child nodes ..\n               var textChild=0, cdataChild=0, hasElementChild=false;\n               for (var n=xml.firstChild; n; n=n.nextSibling) {\n                  if (n.nodeType==1) hasElementChild = true;\n                  else if (n.nodeType==3 && n.nodeValue.match(/[^ \\f\\n\\r\\t\\v]/)) textChild++; // non-whitespace text\n                  else if (n.nodeType==4) cdataChild++; // cdata section node\n               }\n               if (hasElementChild) {\n                  if (textChild < 2 && cdataChild < 2) { // structured element with evtl. a single text or/and cdata node ..\n                     X.removeWhite(xml);\n                     for (var n=xml.firstChild; n; n=n.nextSibling) {\n                        if (n.nodeType == 3)  // text node\n                           o[\"#text\"] = X.escape(n.nodeValue);\n                        else if (n.nodeType == 4)  // cdata node\n                           o[\"#cdata\"] = X.escape(n.nodeValue);\n                        else if (o[n.nodeName]) {  // multiple occurence of element ..\n                           if (o[n.nodeName] instanceof Array)\n                              o[n.nodeName][o[n.nodeName].length] = X.toObj(n);\n                           else\n                              o[n.nodeName] = [o[n.nodeName], X.toObj(n)];\n                        }\n                        else  // first occurence of element..\n                           o[n.nodeName] = X.toObj(n);\n                     }\n                  }\n                  else { // mixed content\n                     if (!xml.attributes.length)\n                        o = X.escape(X.innerXml(xml));\n                     else\n                        o[\"#text\"] = X.escape(X.innerXml(xml));\n                  }\n               }\n               else if (textChild) { // pure text\n                  if (!xml.attributes.length)\n                     o = X.escape(X.innerXml(xml));\n                  else\n                     o[\"#text\"] = X.escape(X.innerXml(xml));\n               }\n               else if (cdataChild) { // cdata\n                  if (cdataChild > 1)\n                     o = X.escape(X.innerXml(xml));\n                  else\n                     for (var n=xml.firstChild; n; n=n.nextSibling)\n                        o[\"#cdata\"] = X.escape(n.nodeValue);\n               }\n            }\n            if (!xml.attributes.length && !xml.firstChild) o = null;\n         }\n         else if (xml.nodeType==9) { // document.node\n            o = X.toObj(xml.documentElement);\n         }\n         else\n            alert(\"unhandled node type: \" + xml.nodeType);\n         return o;\n      },\n      toJson: function(o, name, ind) {\n         var json = name ? (\"\\\"\"+name+\"\\\"\") : \"\";\n         if (o instanceof Array) {\n            for (var i=0,n=o.length; i<n; i++)\n               o[i] = X.toJson(o[i], \"\", ind+\"\\t\");\n            json += (name?\":[\":\"[\") + (o.length > 1 ? (\"\\n\"+ind+\"\\t\"+o.join(\",\\n\"+ind+\"\\t\")+\"\\n\"+ind) : o.join(\"\")) + \"]\";\n         }\n         else if (o == null)\n            json += (name&&\":\") + \"null\";\n         else if (typeof(o) == \"object\") {\n            var arr = [];\n            for (var m in o)\n               arr[arr.length] = X.toJson(o[m], m, ind+\"\\t\");\n            json += (name?\":{\":\"{\") + (arr.length > 1 ? (\"\\n\"+ind+\"\\t\"+arr.join(\",\\n\"+ind+\"\\t\")+\"\\n\"+ind) : arr.join(\"\")) + \"}\";\n         }\n         else if (typeof(o) == \"string\")\n            json += (name&&\":\") + \"\\\"\" + o.toString() + \"\\\"\";\n         else\n            json += (name&&\":\") + o.toString();\n         return json;\n      },\n      innerXml: function(node) {\n         var s = \"\"\n         if (\"innerHTML\" in node)\n            s = node.innerHTML;\n         else {\n            var asXml = function(n) {\n               var s = \"\";\n               if (n.nodeType == 1) {\n                  s += \"<\" + n.nodeName;\n                  for (var i=0; i<n.attributes.length;i++)\n                     s += \" \" + n.attributes[i].nodeName + \"=\\\"\" + (n.attributes[i].nodeValue||\"\").toString() + \"\\\"\";\n                  if (n.firstChild) {\n                     s += \">\";\n                     for (var c=n.firstChild; c; c=c.nextSibling)\n                        s += asXml(c);\n                     s += \"</\"+n.nodeName+\">\";\n                  }\n                  else\n                     s += \"/>\";\n               }\n               else if (n.nodeType == 3)\n                  s += n.nodeValue;\n               else if (n.nodeType == 4)\n                  s += \"<![CDATA[\" + n.nodeValue + \"]]>\";\n               return s;\n            };\n            for (var c=node.firstChild; c; c=c.nextSibling)\n               s += asXml(c);\n         }\n         return s;\n      },\n      escape: function(txt) {\n         return txt.replace(/[\\\\]/g, \"\\\\\\\\\")\n                   .replace(/[\\\"]/g, '\\\\\"')\n                   .replace(/[\\n]/g, '\\\\n')\n                   .replace(/[\\r]/g, '\\\\r');\n      },\n      removeWhite: function(e) {\n         e.normalize();\n         for (var n = e.firstChild; n; ) {\n            if (n.nodeType == 3) {  // text node\n               if (!n.nodeValue.match(/[^ \\f\\n\\r\\t\\v]/)) { // pure whitespace text node\n                  var nxt = n.nextSibling;\n                  e.removeChild(n);\n                  n = nxt;\n               }\n               else\n                  n = n.nextSibling;\n            }\n            else if (n.nodeType == 1) {  // element node\n               X.removeWhite(n);\n               n = n.nextSibling;\n            }\n            else                      // any other node\n               n = n.nextSibling;\n         }\n         return e;\n      }\n   };\n        xml = parseXml(xml);\n   if (xml.nodeType == 9) // document node\n      xml = xml.documentElement;\n   var json = X.toJson(X.toObj(X.removeWhite(xml)), xml.nodeName, \"\\t\");\n   return \"{\\n\" + tab + (tab ? json.replace(/\\t/g, tab) : json.replace(/\\t|\\n/g, \"\")) + \"\\n}\";\n}"],"sourceRoot":"webpack:///"}